# aws cloudformation validate-template --template-body file://C:\Users\user\td_kubernetes\20_eks\21_aws\cloudformation-create-ec2instance.yaml

---
  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'Amazon EKS Sample VPC - Private and Public subnets'
  
  Parameters:
    VpcBlock:
      Type: String
      Default: 192.168.0.0/16
  
    PublicSubnet01Block:
      Type: String
      Default: 192.168.32.0/19
  
    PublicSubnet02Block:
      Type: String
      Default: 192.168.64.0/19
  
    PrivateSubnetBlock:
      Type: String
      Default: 192.168.96.0/19
  

  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        -
          Label:
            default: "Worker Network Configuration"
          Parameters:
            - VpcBlock
            - PublicSubnet01Block
            - PublicSubnet02Block
            - PrivateSubnetBlock
  
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock:  !Ref VpcBlock
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
  
    VPCGatewayAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
  
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private
  
    PublicRoute:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  
    PrivateRoute:
      DependsOn:
      - VPCGatewayAttachment
      - NatGateway
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway
  
    NatGateway:
      DependsOn:
      - NatGatewayEIP
      - PublicSubnet01
      - VPCGatewayAttachment
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt 'NatGatewayEIP.AllocationId'
        SubnetId: !Ref PublicSubnet01
        Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  
    NatGatewayEIP:
      DependsOn:
      - VPCGatewayAttachment
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
  
    PublicSubnet01:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 01
      Properties:
        AvailabilityZone:
          Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:
          Ref: PublicSubnet01Block
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet01"
  
    PublicSubnet02:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 02
      Properties:
        AvailabilityZone:
          Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:
          Ref: PublicSubnet02Block
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet02"
  
    PrivateSubnet:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 03
      Properties:
        AvailabilityZone:
          Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:
          Ref: PrivateSubnetBlock
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet"
  
  
    PublicSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet01
        RouteTableId: !Ref PublicRouteTable
  
    PublicSubnet02RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet02
        RouteTableId: !Ref PublicRouteTable
  
    PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet
        RouteTableId: !Ref PrivateRouteTable

  
    ControlPlaneSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Cluster communication with worker nodes
        VpcId: !Ref VPC


  Outputs:
    PublicSubnetIds:
      Description: Public Subnets IDs in the VPC
      Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02 ] ]
      Export:
        Name: PublicSubnetIds

    PrivateSubnetIds:
      Description: Private Subnets IDs in the VPC
      Value: !Join [ ",", [ !Ref PrivateSubnet ] ]
      Export:
        Name: PrivateSubnetIds

    SecurityGroups:
      Description: Security group for the cluster control plane communication with worker nodes
      Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
      Export:
        Name: SecurityGroups

    VpcId:
      Description: The VPC Id
      Value: !Ref VPC
      Export:
        Name: VpcId
  